{"version":3,"file":"index.js","sources":["../../src/index.tsx"],"sourcesContent":["/**\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * This script exports a HOC that accepts a routes array of objects\n * and an options object.\n *\n * API:\n *\n * withBreadcrumbs(\n *   routes?: Array<Route>,\n *   options? Object<Options>,\n * ): HigherOrderComponent\n *\n * More Info:\n *\n * https://github.com/icd2k3/react-router-breadcrumbs-hoc\n *\n */\n\nimport React, { createElement } from 'react';\nimport { matchPath, withRouter } from 'react-router';\n\n/* eslint-disable-next-line */\nimport * as types from '../types/react-router-breadcrumbs-hoc/index'\n\nconst DEFAULT_MATCH_OPTIONS = { exact: true };\nconst NO_BREADCRUMB = 'NO_BREADCRUMB';\n\n/**\n * This method was \"borrowed\" from https://stackoverflow.com/a/28339742\n * we used to use the humanize-string package, but it added a lot of bundle\n * size and issues with compilation. This 4-liner seems to cover most cases.\n */\nconst humanize = (str: string): string => str\n  .replace(/^[\\s_]+|[\\s_]+$/g, '')\n  .replace(/[_\\s]+/g, ' ')\n  .replace(/^[a-z]/, (m) => m.toUpperCase());\n\n/**\n * Renders and returns the breadcrumb complete\n * with `match`, `location`, and `key` props.\n */\nconst render = ({\n  breadcrumb: Breadcrumb,\n  match,\n  location,\n  ...rest\n}: {\n  breadcrumb: React.ComponentType | string,\n  match: { url: string },\n  location: types.Location\n}): {\n  match: { url: string },\n  location: types.Location,\n  key: string,\n  breadcrumb: React.ReactNode\n} => {\n  const componentProps = { match, location, key: match.url, ...rest };\n\n  return {\n    ...componentProps,\n    breadcrumb: typeof Breadcrumb === 'string'\n      ? createElement('span', { key: componentProps.key }, Breadcrumb)\n      : <Breadcrumb {...componentProps} />,\n  };\n};\n\n/**\n * Small helper method to get a default breadcrumb if the user hasn't provided one.\n*/\nconst getDefaultBreadcrumb = ({\n  currentSection,\n  location,\n  pathSection,\n}: {\n  currentSection: string,\n  location: types.Location,\n  pathSection: string,\n}) => {\n  const match = matchPath(pathSection, { ...DEFAULT_MATCH_OPTIONS, path: pathSection })\n    /* istanbul ignore next: this is hard to mock in jest :( */\n    || { url: 'not-found' };\n\n  return render({\n    breadcrumb: humanize(currentSection),\n    match,\n    location,\n  });\n};\n\n/**\n * Loops through the route array (if provided) and returns either a\n * user-provided breadcrumb OR a sensible default (if enabled)\n*/\nconst getBreadcrumbMatch = ({\n  currentSection,\n  disableDefaults,\n  excludePaths,\n  location,\n  pathSection,\n  routes,\n}: {\n  currentSection: string,\n  disableDefaults?: boolean,\n  excludePaths?: string[],\n  location: { pathname: string },\n  pathSection: string,\n  routes: types.BreadcrumbsRoute[]\n}) => {\n  let breadcrumb;\n\n  // Check the optional `excludePaths` option in `options` to see if the\n  // current path should not include a breadcrumb.\n  const getIsPathExcluded = (path: string) => matchPath(pathSection, {\n    path,\n    exact: true,\n    strict: false,\n  });\n  if (excludePaths && excludePaths.some(getIsPathExcluded)) {\n    return NO_BREADCRUMB;\n  }\n\n  // Loop through the route array and see if the user has provided a custom breadcrumb.\n  routes.some(({ breadcrumb: userProvidedBreadcrumb, matchOptions, path, ...rest }) => {\n    if (!path) {\n      throw new Error('withBreadcrumbs: `path` must be provided in every route object');\n    }\n\n    const match = matchPath(pathSection, { ...(matchOptions || DEFAULT_MATCH_OPTIONS), path });\n\n    // If user passed breadcrumb: null OR custom match options to suppress a breadcrumb\n    // we need to know NOT to add it to the matches array\n    // see: `if (breadcrumb !== NO_BREADCRUMB)` below.\n    if ((match && userProvidedBreadcrumb === null) || (!match && matchOptions)) {\n      breadcrumb = NO_BREADCRUMB;\n      return true;\n    }\n\n    if (match) {\n      // This covers the case where a user may be extending their react-router route\n      // config with breadcrumbs, but also does not want default breadcrumbs to be\n      // automatically generated (opt-in).\n      if (!userProvidedBreadcrumb && disableDefaults) {\n        breadcrumb = NO_BREADCRUMB;\n        return true;\n      }\n\n      breadcrumb = render({\n        // Although we have a match, the user may be passing their react-router config object\n        // which we support. The route config object may not have a `breadcrumb` param specified.\n        // If this is the case, we should provide a default via `humanize`.\n        breadcrumb: userProvidedBreadcrumb || humanize(currentSection),\n        match,\n        location,\n        ...rest,\n      });\n      return true;\n    }\n    return false;\n  });\n\n  // User provided a breadcrumb prop, or we generated one above.\n  if (breadcrumb) {\n    return breadcrumb;\n  }\n\n  // If there was no breadcrumb provided and user has disableDefaults turned on.\n  if (disableDefaults) {\n    return NO_BREADCRUMB;\n  }\n\n  // If the above conditionals don't fire, generate a default breadcrumb based on the path.\n  return getDefaultBreadcrumb({\n    pathSection,\n    // include a \"Home\" breadcrumb by default (can be overrode or disabled in config).\n    currentSection: pathSection === '/' ? 'Home' : currentSection,\n    location,\n  });\n};\n\n/**\n * Splits the pathname into sections, then search for matches in the routes\n * a user-provided breadcrumb OR a sensible default.\n*/\nexport const getBreadcrumbs = (\n  {\n    routes,\n    location,\n    options = {},\n  }: {\n    routes: types.BreadcrumbsRoute[],\n    location: types.Location,\n    options?: types.Options\n  },\n): Array<React.ReactNode | string> => {\n  const matches:Array<React.ReactNode | string> = [];\n  const { pathname } = location;\n\n  pathname\n    .split('?')[0]\n    // Remove trailing slash \"/\" from pathname.\n    .replace(/\\/$/, '')\n    // Split pathname into sections.\n    .split('/')\n    // Reduce over the sections and call `getBreadcrumbMatch()` for each section.\n    .reduce((previousSection: string, currentSection: string) => {\n      // Combine the last route section with the currentSection.\n      // For example, `pathname = /1/2/3` results in match checks for\n      // `/1`, `/1/2`, `/1/2/3`.\n      const pathSection = !currentSection ? '/' : `${previousSection}/${currentSection}`;\n\n      const breadcrumb = getBreadcrumbMatch({\n        currentSection,\n        location,\n        pathSection,\n        routes,\n        ...options,\n      });\n\n      // Add the breadcrumb to the matches array\n      // unless the user has explicitly passed.\n      // { path: x, breadcrumb: null } to disable.\n      if (breadcrumb !== NO_BREADCRUMB) {\n        matches.push(breadcrumb);\n      }\n\n      return pathSection === '/' ? '' : pathSection;\n    }, '');\n\n  return matches;\n};\n\n/**\n * Takes a route array and recursively flattens it IF there are\n * nested routes in the config.\n*/\nconst flattenRoutes = (routes: types.BreadcrumbsRoute[]) => (routes)\n  .reduce((arr, route: types.BreadcrumbsRoute): types.BreadcrumbsRoute[] => {\n    if (route.routes) {\n      return arr.concat([route, ...flattenRoutes(route.routes)]);\n    }\n    return arr.concat(route);\n  }, [] as types.BreadcrumbsRoute[]);\n\nexport default (\n  routes?: types.BreadcrumbsRoute[],\n  options?: types.Options,\n) => (Component: React.ComponentType) => withRouter(\n  (props: { location: types.Location }) => createElement(Component, {\n    ...props,\n    // @ts-ignore-next-line\n    breadcrumbs: getBreadcrumbs({\n      routes: flattenRoutes(routes || []),\n      location: props.location,\n      options,\n    }),\n  }),\n);\n"],"names":["DEFAULT_MATCH_OPTIONS","exact","NO_BREADCRUMB","humanize","str","replace","m","toUpperCase","render","Breadcrumb","breadcrumb","match","location","rest","componentProps","key","url","createElement","getDefaultBreadcrumb","currentSection","pathSection","matchPath","path","getBreadcrumbMatch","disableDefaults","excludePaths","routes","getIsPathExcluded","strict","some","userProvidedBreadcrumb","matchOptions","Error","getBreadcrumbs","options","matches","pathname","split","reduce","previousSection","push","flattenRoutes","arr","route","concat","Component","withRouter","props","breadcrumbs"],"mappings":"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"}