{"version":3,"file":"index.js","sources":["../../src/index.tsx"],"sourcesContent":["/**\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * This script exports a HOC that accepts a routes array of objects\n * and an options object.\n *\n * API:\n *\n * withBreadcrumbs(\n *   routes?: Array<Route>,\n *   options? Object<Options>,\n * ): HigherOrderComponent\n *\n * More Info:\n *\n * https://github.com/icd2k3/react-router-breadcrumbs-hoc\n *\n */\n\nimport React, { createElement } from 'react';\nimport { matchPath, withRouter } from 'react-router';\n\n/* eslint-disable-next-line */\nimport * as types from '../types/react-router-breadcrumbs-hoc/index'\n\nconst DEFAULT_MATCH_OPTIONS = { exact: true };\nconst NO_BREADCRUMB = 'NO_BREADCRUMB';\n\n/**\n * This method was \"borrowed\" from https://stackoverflow.com/a/28339742\n * we used to use the humanize-string package, but it added a lot of bundle\n * size and issues with compilation. This 4-liner seems to cover most cases.\n */\nconst humanize = (str: string): string => str\n  .replace(/^[\\s_]+|[\\s_]+$/g, '')\n  .replace(/[_\\s]+/g, ' ')\n  .replace(/^[a-z]/, (m) => m.toUpperCase());\n\n/**\n * Renders and returns the breadcrumb complete\n * with `match`, `location`, and `key` props.\n */\nconst render = ({\n  breadcrumb: Breadcrumb,\n  match,\n  location,\n  ...rest\n}: {\n  breadcrumb: React.ComponentType | string,\n  match: { url: string },\n  location: types.Location\n}): {\n  match: { url: string },\n  location: types.Location,\n  key: string,\n  breadcrumb: React.ReactNode\n} => {\n  const componentProps = { match, location, key: match.url, ...rest };\n\n  return {\n    ...componentProps,\n    breadcrumb: typeof Breadcrumb === 'string'\n      ? createElement('span', { key: componentProps.key }, Breadcrumb)\n      : <Breadcrumb {...componentProps} />,\n  };\n};\n\n/**\n * Small helper method to get a default breadcrumb if the user hasn't provided one.\n*/\nconst getDefaultBreadcrumb = ({\n  currentSection,\n  location,\n  pathSection,\n}: {\n  currentSection: string,\n  location: types.Location,\n  pathSection: string,\n}) => {\n  const match = matchPath(pathSection, { ...DEFAULT_MATCH_OPTIONS, path: pathSection })\n    /* istanbul ignore next: this is hard to mock in jest :( */\n    || { url: 'not-found' };\n\n  return render({\n    breadcrumb: humanize(currentSection),\n    match,\n    location,\n  });\n};\n\n/**\n * Loops through the route array (if provided) and returns either a\n * user-provided breadcrumb OR a sensible default (if enabled)\n*/\nconst getBreadcrumbMatch = ({\n  currentSection,\n  disableDefaults,\n  excludePaths,\n  location,\n  pathSection,\n  routes,\n}: {\n  currentSection: string,\n  disableDefaults?: boolean,\n  excludePaths?: string[],\n  location: { pathname: string },\n  pathSection: string,\n  routes: types.BreadcrumbsRoute[]\n}) => {\n  let breadcrumb;\n\n  // Check the optional `excludePaths` option in `options` to see if the\n  // current path should not include a breadcrumb.\n  const getIsPathExcluded = (path: string) => matchPath(pathSection, {\n    path,\n    exact: true,\n    strict: false,\n  });\n  if (excludePaths && excludePaths.some(getIsPathExcluded)) {\n    return NO_BREADCRUMB;\n  }\n\n  // Loop through the route array and see if the user has provided a custom breadcrumb.\n  routes.some(({ breadcrumb: userProvidedBreadcrumb, matchOptions, path, ...rest }) => {\n    if (!path) {\n      throw new Error('withBreadcrumbs: `path` must be provided in every route object');\n    }\n\n    const match = matchPath(pathSection, { ...(matchOptions || DEFAULT_MATCH_OPTIONS), path });\n\n    // If user passed breadcrumb: null OR custom match options to suppress a breadcrumb\n    // we need to know NOT to add it to the matches array\n    // see: `if (breadcrumb !== NO_BREADCRUMB)` below.\n    if ((match && userProvidedBreadcrumb === null) || (!match && matchOptions)) {\n      breadcrumb = NO_BREADCRUMB;\n      return true;\n    }\n\n    if (match) {\n      // This covers the case where a user may be extending their react-router route\n      // config with breadcrumbs, but also does not want default breadcrumbs to be\n      // automatically generated (opt-in).\n      if (!userProvidedBreadcrumb && disableDefaults) {\n        breadcrumb = NO_BREADCRUMB;\n        return true;\n      }\n\n      breadcrumb = render({\n        // Although we have a match, the user may be passing their react-router config object\n        // which we support. The route config object may not have a `breadcrumb` param specified.\n        // If this is the case, we should provide a default via `humanize`.\n        breadcrumb: userProvidedBreadcrumb || humanize(currentSection),\n        match,\n        location,\n        ...rest,\n      });\n      return true;\n    }\n    return false;\n  });\n\n  // User provided a breadcrumb prop, or we generated one above.\n  if (breadcrumb) {\n    return breadcrumb;\n  }\n\n  // If there was no breadcrumb provided and user has disableDefaults turned on.\n  if (disableDefaults) {\n    return NO_BREADCRUMB;\n  }\n\n  // If the above conditionals don't fire, generate a default breadcrumb based on the path.\n  return getDefaultBreadcrumb({\n    pathSection,\n    // include a \"Home\" breadcrumb by default (can be overrode or disabled in config).\n    currentSection: pathSection === '/' ? 'Home' : currentSection,\n    location,\n  });\n};\n\n/**\n * Splits the pathname into sections, then search for matches in the routes\n * a user-provided breadcrumb OR a sensible default.\n*/\nexport const getBreadcrumbs = (\n  {\n    routes,\n    location,\n    options = {},\n  }: {\n    routes: types.BreadcrumbsRoute[],\n    location: types.Location,\n    options?: types.Options\n  },\n): Array<React.ReactNode | string> => {\n  const matches:Array<React.ReactNode | string> = [];\n  const { pathname } = location;\n\n  pathname\n    .split('?')[0]\n    // Remove trailing slash \"/\" from pathname.\n    .replace(/\\/$/, '')\n    // Split pathname into sections.\n    .split('/')\n    // Reduce over the sections and call `getBreadcrumbMatch()` for each section.\n    .reduce((previousSection: string, currentSection: string) => {\n      // Combine the last route section with the currentSection.\n      // For example, `pathname = /1/2/3` results in match checks for\n      // `/1`, `/1/2`, `/1/2/3`.\n      const pathSection = !currentSection ? '/' : `${previousSection}/${currentSection}`;\n\n      const breadcrumb = getBreadcrumbMatch({\n        currentSection,\n        location,\n        pathSection,\n        routes,\n        ...options,\n      });\n\n      // Add the breadcrumb to the matches array\n      // unless the user has explicitly passed.\n      // { path: x, breadcrumb: null } to disable.\n      if (breadcrumb !== NO_BREADCRUMB) {\n        matches.push(breadcrumb);\n      }\n\n      return pathSection === '/' ? '' : pathSection;\n    }, '');\n\n  return matches;\n};\n\n/**\n * Takes a route array and recursively flattens it IF there are\n * nested routes in the config.\n*/\nconst flattenRoutes = (routes: types.BreadcrumbsRoute[]) => (routes)\n  .reduce((arr, route: types.BreadcrumbsRoute): types.BreadcrumbsRoute[] => {\n    if (route.routes) {\n      return arr.concat([route, ...flattenRoutes(route.routes)]);\n    }\n    return arr.concat(route);\n  }, [] as types.BreadcrumbsRoute[]);\n\nexport default (\n  routes?: types.BreadcrumbsRoute[],\n  options?: types.Options,\n) => (Component: React.ComponentType) => withRouter(\n  (props: { location: types.Location }) => createElement(Component, {\n    ...props,\n    // @ts-ignore-next-line\n    breadcrumbs: getBreadcrumbs({\n      routes: flattenRoutes(routes || []),\n      location: props.location,\n      options,\n    }),\n  }),\n);\n"],"names":["humanize","str","replace","m","toUpperCase","render","Breadcrumb","breadcrumb","match","location","rest","componentProps","key","url","createElement","React","getBreadcrumbMatch","currentSection","pathSection","disableDefaults","excludePaths","routes","some","path","matchPath","exact","strict","NO_BREADCRUMB","userProvidedBreadcrumb","matchOptions","Error","DEFAULT_MATCH_OPTIONS","getBreadcrumbs","options","matches","pathname","split","reduce","previousSection","push","Component","withRouter","props","breadcrumbs","flattenRoutes","arr","route","concat"],"mappings":"gsDAkCiB,SAAXA,EAAYC,UAAwBA,EACvCC,QAAQ,mBAAoB,IAC5BA,QAAQ,UAAW,KACnBA,QAAQ,SAAU,SAACC,UAAMA,EAAEC,gBAMf,SAATC,SACQC,IAAZC,WACAC,IAAAA,MACAC,IAAAA,SACGC,yCAWGC,KAAmBH,MAAAA,EAAOC,SAAAA,EAAUG,IAAKJ,EAAMK,KAAQH,eAGxDC,GACHJ,WAAkC,iBAAfD,EACfQ,gBAAc,OAAQ,CAAEF,IAAKD,EAAeC,KAAON,GACnDS,gBAACT,EAAeK,KA+BG,SAArBK,SAeAT,IAtCJU,EACAR,EACAS,EAMMV,EAgBNS,IAAAA,eACAE,IAAAA,gBACAC,IAAAA,aACAX,IAAAA,SACAS,IAAAA,YACAG,IAAAA,cAkBID,GAAgBA,EAAaE,KALP,SAACC,UAAiBC,YAAUN,EAAa,CACjEK,KAAAA,EACAE,OAAO,EACPC,QAAQ,MAGDC,GAITN,EAAOC,KAAK,gBAAeM,IAAZrB,WAAoCsB,IAAAA,aAAcN,IAAAA,KAASb,gDACnEa,QACG,IAAIO,MAAM,sEAGZtB,EAAQgB,YAAUN,OAAmBW,GAAgBE,GAAwBR,KAAAA,YAK9Ef,GAAoC,OAA3BoB,IAAsCpB,GAASqB,GAC3DtB,EAAaoB,GACN,KAGLnB,IAKAD,GADGqB,GAA0BT,EAChBQ,EAIFtB,KAIXE,WAAYqB,GAA0B5B,EAASiB,GAC/CT,MAAAA,EACAC,SAAAA,GACGC,KAVI,KAkBTH,IAKAY,EACKQ,GAjGTV,KAqG4B,CAC1BC,YAAAA,EAEAD,eAAgC,MAAhBC,EAAsB,OAASD,EAC/CR,SAAAA,IAzGFQ,eACAR,IAAAA,SACAS,IAAAA,YAMMV,EAAQgB,YAAUN,OAAkBa,GAAuBR,KAAML,MAElE,CAAEL,IAAK,aAELR,EAAO,CACZE,WAAYP,EAASiB,GACrBT,MAAAA,EACAC,SAAAA,OAkG0B,SAAjBuB,SAETX,IAAAA,OACAZ,IAAAA,aACAwB,QAAAA,aAAU,KAONC,EAA0C,UAC3BzB,EAAb0B,SAGLC,MAAM,KAAK,GAEXlC,QAAQ,MAAO,IAEfkC,MAAM,KAENC,OAAO,SAACC,EAAyBrB,OAI1BC,EAAeD,YAA0BqB,cAAmBrB,GAA5B,IAEhCV,EAAaS,KACjBC,eAAAA,EACAR,SAAAA,EACAS,YAAAA,EACAG,OAAAA,GACGY,WAMD1B,IAAeoB,GACjBO,EAAQK,KAAKhC,GAGQ,MAAhBW,EAAsB,GAAKA,GACjC,IAEEgB,EA5MT,IAAMH,EAAwB,CAAEN,OAAO,GACjCE,EAAgB,mCA2NpBN,EACAY,UACG,SAACO,UAAmCC,aACvC,SAACC,UAAwC5B,gBAAc0B,OAClDE,GAEHC,YAAaX,EAAe,CAC1BX,OAhBgB,SAAhBuB,EAAiBvB,UAAsCA,EAC1DgB,OAAO,SAACQ,EAAKC,UACRA,EAAMzB,OACDwB,EAAIE,QAAQD,YAAUF,EAAcE,EAAMzB,WAE5CwB,EAAIE,OAAOD,IACjB,IAUSF,CAAcvB,GAAU,IAChCZ,SAAUiC,EAAMjC,SAChBwB,QAAAA"}